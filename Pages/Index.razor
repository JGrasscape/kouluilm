@page "/"

@inject KoulutusService KoulutusService
@inject ResurssiService ResurssiService
@inject VarausService VarausService
@inject IlmoittautuminenService IlmoittautuminenService

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor

@inject AuthenticationStateProvider AuthenticationStateProvider

<head>
    <h1>EPSHP - Koulutuksiin ilmoittautuminen</h1>
</head>

<div class="form-group">
    <EditForm Model="@koulutus">
        <label for="koulutus">Koulutus:</label>
        <InputSelect class="form-control" Value="@koulutus.Koulutus_ID" ValueChanged="@((string value) => koulutusMuutos(value))" ValueExpression="@(() => koulutus.Koulutus_ID)">
            <option value="">Valitse...</option>
            @foreach (var koulutus in koulutukset)
            {
                <option value="@koulutus.Koulutus_ID">@koulutus.Nimi</option>
            }
        </InputSelect>
    </EditForm>
</div>

@if (koulutus.Koulutus_ID == null)
{
    // Ei näytetä koulutuksia
}
else
{
    <div>
        <p>@selite</p>
    </div>

    <div>
        <h4>Koulutukset:</h4>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Pvm</th>
                    <th>Kello</th>
                    <th>Sijainti</th>
                    <th>Osallistujat</th>
                </tr>
            </thead>
            <tbody>               
                @foreach (var varaus in varaukset) // Tilavaraukset läpi
                {   
                    // Valitaan varaukseen kuuluva resurssi
                    resurssi = resurssit.Single(r => r.Resurssi_ID == varaus.Resurssi_ID);
                    
                    <tr @onclick="@(() => naytaOsallistujatFunc(varaus.Varaus_ID, varaus.Osallistujat))">
                        <td>@varaus.Varauspvm.ToShortDateString()</td>
                        <td>@varaus.Kloalku - @varaus.Kloloppu</td>
                        <td>@resurssi.Nimi</td>
                        <td>@varaus.Osallistujat / @resurssi.Paikkalkm</td>
                    </tr>

                    // Näytetäänkö osallistujat
                    if (@naytaOsallistujat)
                    {
                        // TABLE                                               
                        // Näytetään vain valitun varauksen osallistujat
                        if (ilmoittautumiset[0].Linkki_Varaus_ID == varaus.Varaus_ID)
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Paikka</th>
                                        <th>Osallistuja</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{                                        
                                        bool found = false;
                                        Console.WriteLine("Table, paikkalm: " + resurssi.Paikkalkm.ToString());
                                    }                                    
                                    @for (int i = 1; i <= resurssi.Paikkalkm; i++)
                                    {
                                        found = false;                                        
                                        @foreach (var ilm in ilmoittautumiset) // Osallistujat läpi
                                        {                                            
                                            if (i == ilm.Paikka)
                                            {
                                                <tr>
                                                    <td>@ilm.Paikka</td>
                                                    <td>@ilm.Nimi</td>
                                                </tr>
                                                found = true;
                                                break;
                                            }                                           
                                        }
                                        if (!found)
                                        {
                                            <tr>
                                                <td>@i</td>
                                                <td></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                            <button type="button" class="btn btn-success" disabled="@ilmoittauduDisabled" @onclick="@Ilmoittaudu">Ilmoittaudu</button>
                        }                     
                    }                    
                }                
            </tbody>
        </table>
    </div>
}

@if (naytaOsallistujatModal)
{
    <div class="modal fade show" id="osallistujatModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Osallistujat</h4>
                    <button type="button" class="close" @onclick="@OsallistujatPeruuta">&times;</button>
                </div>

                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Paikka</th>
                                <th>Osallistuja</th>
                                <th>Yksikkö</th>
                                <th>Puh</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{                                        
                                bool found = false;
                            }                                    
                            @for (int i = 1; i <= ilmo.PaikkaLkm; i++)
                            {
                                found = false;                                        
                                @foreach (var ilm in ilmoittautumiset) // Osallistujat läpi
                                {                                            
                                    if (i == ilm.Paikka)
                                    {
                                        <tr>
                                            <td>@ilm.Paikka</td>
                                            <td>@ilm.Nimi</td>
                                            <td>@ilm.Yksikko</td>
                                            <td>@ilm.Puh</td>
                                        </tr>
                                        found = true;
                                        break;
                                    }                                           
                                }
                                if (!found)
                                {
                                    <tr>
                                        <td>@i</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@OsallistujatPeruuta">Sulje</button>
                    <button type="button" class="btn btn-success" disabled="@ilmoittauduDisabled" @onclick="@Ilmoittaudu">Ilmoittaudu</button>
                </div>
            </div>
        </div>
    </div>
}

@if (naytaKaavake)
{
    <div class="modal fade show" id="kaavakeModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Osallistujan tiedot</h4>
                    <button type="button" class="close" @onclick="@KaavakePeruuta">&times;</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <EditForm Model="@ilmo">
                            <div class="form-group">
                                <label for="nimi">Nimi:</label>
                                <InputText id="nimi" class="form-control" @bind-Value="@ilmo.Nimi"></InputText>
                            </div>
                            <div class="form-group">
                                <label for="yksikko">Yksikkö:</label>
                                <InputText id="yksikko" class="form-control" @bind-Value="@ilmo.Yksikko"></InputText>
                            </div> 
                            <div class="form-group">
                                <label for="puh">Puh:</label>
                                <InputText id="puh" class="form-control" @bind-Value="@ilmo.Puh"></InputText>
                            </div>                         
                        </EditForm>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@KaavakePeruuta">Sulje</button>
                    @ilmoMessu
                    <button type="button" class="btn btn-success" @onclick="@KaavakeOK">Ilmoittaudu</button>
                </div>
            </div>
        </div>
    </div>
}

<footer>
    <p>&copy; EPSHP</p>
</footer>

@code {
    // TODO:
    // Näytä menneet koulutukset
    // Siivoa TODOt
    // Siivoa DEBUGit
    private Koulutus koulutus = new Koulutus();
    private List<Koulutus> koulutukset;
    private Resurssi resurssi = new Resurssi();
    private List<Resurssi> resurssit;
    private List<Varaus> varaukset;
    private List<Ilmoittautuminen> ilmoittautumiset;
    private Ilmoittautuminen ilmo = new Ilmoittautuminen();
    private string selite = "", ilmoMessu = "", user = "";
    private bool naytaOsallistujat = false, naytaOsallistujatModal = false, ilmoittauduDisabled = false, naytaKaavake = false;

    private async void naytaOsallistujatFunc(int varaus_id, int osallistujaLkm)
    {   
        // Haetaan ilmoittautujat   
        ilmoittautumiset = await IlmoittautuminenService.GetOsallistujatAsync(varaus_id);

        // Haetaan varaukselle paikkalkm
        int resurssi_id = await VarausService.GetResurssiFromVarausAsync(varaus_id);
        Resurssi r = await ResurssiService.GetResurssiByIDAsync(resurssi_id);
        ilmo.PaikkaLkm = r.Paikkalkm;
        ilmo.OsallistujaLkm = osallistujaLkm;

        // DEBUG
        Console.WriteLine("naytaOsallistujatFunc ilmo.paikkalkm: {0}", ilmo.PaikkaLkm);

        // Mahtuuko mukaan?
        if (ilmo.OsallistujaLkm < ilmo.PaikkaLkm)
        {
            ilmoittauduDisabled = false;
        }
        else
        {
            ilmoittauduDisabled = true;
        }

        // Taulukko osallistujista
        //naytaOsallistujat = !naytaOsallistujat;

        // Modal osallistujista
        naytaOsallistujatModal = true;
        
        ilmo.Linkki_Varaus_ID = varaus_id;
    }

    void OsallistujatPeruuta() => naytaOsallistujatModal = false;
    void Ilmoittaudu() => naytaKaavake = true;

    void KaavakePeruuta()
    {
        naytaKaavake = false;
        ilmoMessu = "";
        ilmo.Nimi = string.Empty;
        ilmo.Yksikko = string.Empty;
        ilmo.Puh = string.Empty;
    }
    async Task KaavakeOK()
    {
        // Tarkastetaan syötetyt kentät
        if (string.IsNullOrWhiteSpace(ilmo.Nimi))
        {            
            ilmoMessu = "Anna ilmoittautujan nimi!";
            return;
        }
        else if (string.IsNullOrWhiteSpace(ilmo.Yksikko))
        {            
            ilmoMessu = "Anna ilmoittautujan yksikkö!";
            return;
        }
        else if (string.IsNullOrWhiteSpace(ilmo.Puh))
        {            
            ilmoMessu = "Anna ilmoittautujan puhnro!";
            return;
        }        

        ilmo.Varaaja = httpContextAccessor.HttpContext.User.Identity.Name;
        if (IlmoittautuminenService.InsertOsallistujaAsync(ilmo))
        {
            Console.WriteLine("Varaus onnistui!");

            // Piilotetaan dialogi ja haetaan ilmoittautumiset        
            ilmoittautumiset = await IlmoittautuminenService.GetOsallistujatAsync(ilmo.Linkki_Varaus_ID);
            ilmoMessu = "";
            ilmo.Nimi = string.Empty;
            ilmo.Yksikko = string.Empty;
            ilmo.Puh = string.Empty;
            naytaKaavake = false;
            ilmo.OsallistujaLkm++;

            // Päivitä alla oleva osallistujamäärä
            await koulutusMuutos(ilmo.Koulutus_ID.ToString());

            // Mahtuuko mukaan?
            if (ilmo.OsallistujaLkm < ilmo.PaikkaLkm)
            {
                ilmoittauduDisabled = false;
            }
            else
            {
                ilmoittauduDisabled = true;
            }
        }
        else
        {
            Console.WriteLine("Varaus ei onnistunut!");
            ilmoMessu = "Varaus ei onnistunut!";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Haetaan tulevat koulutukset ja resurssit
        koulutukset = await KoulutusService.GetKoulutusAsync("=0");
        resurssit = await ResurssiService.GetResurssiAsync();
        
        // Käyttäjän tiedot
        user = httpContextAccessor.HttpContext.User.Identity.Name;
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //user = authState.User.Identity.Name;
    }

    private async Task koulutusMuutos(string value)
    {
        // Valitaan kyseinen koulutus-olio listalta
        koulutus = koulutukset.Single(k => k.Koulutus_ID == value);
        selite = koulutus.Selite;
        ilmo.Koulutus_ID = int.Parse(value);  // Koulutus ID talteen ilmoittautumis-oliolle

        // Haetaan tilavaraukset asiasanojen mukaisesti valitulle koulutukselle
        // Pilkotaan ensin asia- ja kieltosanat
        string sql = "";
        string[] sanat = koulutus.Asiasanat.Split(' ');

        foreach (string sana in sanat)
        {
            sql += " AND aihe LIKE '%" + sana + "%'";
        }

        if (koulutus.Kieltosanat != null)
        {
            sanat = koulutus.Kieltosanat.Split(' ');
            foreach (string sana in sanat)
            {
                sql += " AND aihe NOT LIKE '%" + sana + "%'";
            }
        }

        // Koulutuksiin käytettävät resurssit
        string sql2 = "";

        foreach (Resurssi r in resurssit)
        {
            sql2 += r.Resurssi_ID.ToString() + ", ";
        }

        // TODO: tarkista haetaanko vain tulevat koulutukset        

        // Haetaan tilavaraukset
        //varaukset = await VarausService.GetVarausAsync(sql, sql2, int.Parse(koulutus.Koulutus_ID));
        varaukset = await VarausService.GetVarausAsync(sql, sql2);

        foreach (Varaus v in varaukset)
        {
            // Lasketaan ilmoittautuneet ja talletetaan olioon
            v.Osallistujat = await IlmoittautuminenService.GetOsallistujatCountAsync(v.Varaus_ID);
        }

        //return Task.CompletedTask;
    }
}