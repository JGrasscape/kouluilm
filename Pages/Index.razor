@page "/"

@inject KoulutusService KoulutusService
@inject ResurssiService ResurssiService
@inject VarausService VarausService
@inject IlmoittautuminenService IlmoittautuminenService

<head>
    <h1>EPSHP - Koulutuksiin ilmoittautuminen</h1>
</head>

<div class="form-group">
    <EditForm Model="@koulutus">
        <label for="koulutus">Koulutus:</label>
        <InputSelect class="form-control" Value="@koulutus.Koulutus_ID" ValueChanged="@((string value) => koulutusMuutos(value))" ValueExpression="@(() => koulutus.Koulutus_ID)">
            <option value="">Valitse...</option>
            @foreach (var koulutus in koulutukset)
            {
                <option value="@koulutus.Koulutus_ID">@koulutus.Nimi</option>
            }
        </InputSelect>
    </EditForm>
</div>

@if (koulutus.Koulutus_ID == null)
{
    // Ei näytetä koulutuksia
}
else
{
    <div>
        <p>@selite</p>
    </div>

    <div>
        <h4>Koulutukset:</h4>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Pvm</th>
                    <th>Kello</th>
                    <th>Sijainti</th>
                    <th>Osallistujat</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var varaus in varaukset) // Tilavaraukset läpi
                {
                    foreach (var resurssi in resurssit) // Resurssit läpi
                    {
                        if (varaus.Resurssi_ID == resurssi.Resurssi_ID)
                        {
                            <tr>
                                <td>@varaus.Varauspvm.ToShortDateString()</td>
                                <td>@varaus.Kloalku - @varaus.Kloloppu</td>
                                <td>@resurssi.Nimi</td>
                                <td>@varaus.Osallistujat / @resurssi.Paikkalkm</td>
                                <td><button class="button">Ilmoittaudu</button></td>
                            </tr>
                        }
                    }
                }                
            </tbody>
        </table>
    </div>
}

<footer>
    <p>&copy; EPSHP</p>
    <p>Debuggia: @debug</p>
</footer>

@code {
    private Koulutus koulutus = new Koulutus();
    private List<Koulutus> koulutukset;
    private List<Resurssi> resurssit;    
    private List<Varaus> varaukset;    
    private string debug = "", selite = "";

    protected override async Task OnInitializedAsync()
    {
        // Haetaan koulutukset ja resurssit
        // TODO: Hae vain tulevat
        // TODO: Oma metodi myös menneille koulutuksille
        koulutukset = await KoulutusService.GetKoulutusAsync();
        resurssit = await ResurssiService.GetResurssiAsync();
    }

    private async Task koulutusMuutos(string value)
    {
        // Valitaan kyseinen koulutus-olio listalta
        koulutus = koulutukset.Single(k => k.Koulutus_ID == value);        
        selite = koulutus.Selite;

        // Haetaan tilavaraukset asiasanojen mukaisesti valitulle koulutukselle
        // Pilkotaan ensin asia- ja kieltosanat
        string sql = "";
        string[] sanat = koulutus.Asiasanat.Split(' ');

        foreach (string sana in sanat)
        {
            sql += " AND aihe LIKE '%" + sana + "%'";
        }

        if (koulutus.Kieltosanat != null)
        {
            sanat = koulutus.Kieltosanat.Split(' ');
            foreach (string sana in sanat)
            {
                sql += " AND aihe NOT LIKE '%" + sana + "%'";
            }
        }        

        // Koulutuksiin käytettävät resurssit
        string sql2 = "";

        foreach (Resurssi r in resurssit)
        {
            sql2 += r.Resurssi_ID.ToString() + ", ";
        }

        // TODO: tarkista haetaanko vain tulevat koulutukset        

        // Haetaan tilavaraukset
        varaukset = await VarausService.GetVarausAsync(sql, sql2);

        foreach (Varaus v in varaukset)
        {
            // Lasketaan ilmoittautuneet ja talletetaan olioon
            v.Osallistujat = await IlmoittautuminenService.GetOsallistujatAsync(v.Varaus_ID);
        }

        //return Task.CompletedTask;
    }
}